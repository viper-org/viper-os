#ifndef VIPEROS_ECHIS_STRING
#define VIPEROS_ECHIS_STRING 1

#include <cstddef>
#include <cstring>

namespace std
{
    template <class CharT>
    class basic_string
    {
    public:
        constexpr basic_string()
            : mBuffer(nullptr)
            , mCapacity(0)
            , mSize(0)
        {
        }

        constexpr basic_string(size_t count, CharT ch)
            : mBuffer(new char[count])
            , mCapacity(count)
            , mSize(count)
        {
            memset(mBuffer, ch, count);
        }

        constexpr basic_string(const basic_string& other)
            : mBuffer(new char[other.mCapacity])
            , mCapacity(other.mCapacity)
            , mSize(other.mSize)
        {
            memcpy(mBuffer, other.mBuffer, mSize);
        }

        constexpr basic_string(basic_string&& other)
            : mBuffer(other.mBuffer)
            , mCapacity(other.mCapacity)
            , mSize(other.mSize)
        {
            other.mBuffer = nullptr;
            other.mCapacity = 0;
            other.mSize = 0;
        }

        constexpr basic_string(const CharT* s)
        {
            auto size = strlen(s);
            
            mBuffer = new char[size];
            mCapacity = size;
            mSize = size;

            memcpy(mBuffer, s, size);
        }

        constexpr ~basic_string()
        {
            delete[] mBuffer;
        }


        basic_string& operator=(const basic_string& str)
        {
            delete[] mBuffer;
            mBuffer = new char[str.mCapacity];
            mSize = str.mSize;
            mCapacity = str.mCapacity;

            memcpy(mBuffer, str.mBuffer, mSize);
        }

        basic_string& operator=(basic_string&& str)
        {
            delete[] mBuffer;
            mBuffer = str.mBuffer;
            mSize = str.mSize;
            mCapacity = str.mCapacity;

            str.mBuffer = nullptr;
            str.mSize = 0;
            str.mCapacity = 0;
        }


        constexpr const CharT* c_str() const
        {
            return mBuffer;
        }

        constexpr bool empty() const
        {
            return mSize == 0;
        }

        constexpr size_t size() const
        {
            return mSize;
        }

        constexpr size_t length() const
        {
            return mSize;
        }

        constexpr size_t capacity() const
        {
            return mCapacity;
        }


        constexpr CharT operator[](size_t idx) const
        {
            return mBuffer[idx];
        }


        constexpr bool operator==(const basic_string& other) const
        {
            if (other.mSize != mSize) return false;

            for (size_t i = 0; i < mSize; ++i)
            {
                if (other.mBuffer[i] != mBuffer[i]) return false;
            }
            return true;
        }

        constexpr bool operator==(const char* other) const
        {
            if (other[mSize] != '\0') return false;
            for (size_t i = 0; i < mSize; ++i)
            {
                if (other[i] != mBuffer[i]) return false;
            }
            return true;
        }

    private:
        char* mBuffer;
        size_t mCapacity;
        size_t mSize;
    };

    using string = basic_string<char>;
}

#endif // VIPEROS_ECHIS_STRING